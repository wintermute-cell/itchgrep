version: "3"

tasks:

  # --------------------------------
  #     LOCAL DEVELOPMENT
  # --------------------------------

  templ:
    cmds:
      - templ generate

  fff:
    cmds:
      - task: prepare-fake-gcs-volume

      - defer: docker stop fake-gcs-server && docker rm fake-gcs-server
      - docker run --name fake-gcs-server -p 4443:4443 -v ${PWD}/local_data:/storage fsouza/fake-gcs-server -scheme http -data /storage


  local-dataservice-temp-fix:
    cmds:
      - task: prepare-fake-gcs-volume

      - defer: docker stop fake-gcs-server && docker rm fake-gcs-server
      - docker run -d --name fake-gcs-server -p 4443:4443 -v ${PWD}/local_data:/storage fsouza/fake-gcs-server -scheme http -data /storage

      - RUN_TEST=true RUN_LOCAL=true go run cmd/dataservice/main.go


  local-dataservice:
    cmds:
      - task: prepare-fake-gcs-volume
      - defer: docker network rm itchgrep-network
      - docker network create itchgrep-network

      - defer: docker stop fake-gcs-server && docker rm fake-gcs-server
      - docker run -d --name fake-gcs-server --network itchgrep-network -p 4443:4443 -v ${PWD}/local_data:/storage fsouza/fake-gcs-server -scheme http -data /storage

      - docker build . -t itchgrep-dataservice -f "Dockerfile.dataservice"
      - defer: docker stop itchgrep-dataservice && docker rm itchgrep-dataservice
      - docker run --name itchgrep-dataservice --network itchgrep-network -p 8080:8080 -e RUN_LOCAL=true itchgrep-dataservice

  local-webserver:
    cmds:
      - task: prepare-fake-gcs-volume
      - defer: docker network rm itchgrep-network
      - docker network create itchgrep-network

      - defer: docker stop fake-gcs-server && docker rm fake-gcs-server
      - docker run -d --name fake-gcs-server --network itchgrep-network -p 4443:4443 -v ${PWD}/local_data:/storage fsouza/fake-gcs-server -scheme http -data /storage

      - docker build . -t itchgrep-webserver -f "Dockerfile.webserver"
      - defer: docker stop itchgrep-webserver && docker rm itchgrep-webserver
      - docker run --name itchgrep-webserver --network itchgrep-network -p 8080:8080 -e PAGE_SIZE=36 -e RUN_LOCAL=true itchgrep-webserver

  # --------------------------------
  #     DEPLOYMENT
  # --------------------------------

  gcloud-setup:
    cmds:
      - gcloud auth login
      - gcloud config set project "{{.PROJECT_ID}}"
      - gcloud auth configure-docker
    vars:
      PROJECT_ID: itchgrep

  deploy-all:
    cmds:
      - task: deploy-webserver
      - task: deploy-dataservice

  deploy-webserver:
    cmds:
      - docker build -f Dockerfile.webserver -t "gcr.io/{{.PROJECT_ID}}/webserver" .
      - docker push "gcr.io/{{.PROJECT_ID}}/webserver"
      - gcloud run deploy webserver
        --image "gcr.io/{{.PROJECT_ID}}/webserver"
        --platform managed
        --allow-unauthenticated
        --region "{{.REGION}}"
    vars:
      PROJECT_ID: itchgrep
      REGION: europe-west1

  deploy-dataservice:
    cmds:
      - docker build -f Dockerfile.dataservice -t "gcr.io/{{.PROJECT_ID}}/dataservice" .
      - docker push "gcr.io/{{.PROJECT_ID}}/dataservice"
      - gcloud run deploy dataservice
        --image "gcr.io/{{.PROJECT_ID}}/dataservice"
        --platform managed
        --no-allow-unauthenticated
        --region "{{.REGION}}"
        --no-cpu-throttling
        --memory 1500Mi
    vars:
      PROJECT_ID: itchgrep
      REGION: europe-west1

  create-dataservice-scheduler-job:
    cmds:
      - echo "Using $SERVICE_ACCOUNT_EMAIL"
      - echo "Using $DATASERVICE_URL"
      - gcloud scheduler jobs create http dataservice-job
        --schedule="0 0 * * *"
        --http-method=GET
        --uri="$DATASERVICE_URL/trigger-fetch"
        --oidc-service-account-email="$SERVICE_ACCOUNT_EMAIL"
        --oidc-token-audience="$DATASERVICE_URL"
        --location="{{.LOCATION}}"
    preconditions:
      # SERVICE_ACCOUNT_EMAIL and DATASERVICE_URL must be specified via
      # env vars. don't include them here for security purposes.
      - test -n "$SERVICE_ACCOUNT_EMAIL"
      - test -n "$DATASERVICE_URL"
    vars:
      # paris is not supported for cloud scheduler
      LOCATION: europe-west1


  # --------------------------------
  #     TESTING
  # --------------------------------

  test:
    cmds:
      - task: test-storage

  test-storage:
    silent: false
    env:
      RUN_TEST: true
      RUN_LOCAL: true
    cmds:
      - echo "Testing Storage Package"
      - task: prepare-temp-fake-gcs-volume
      - defer: { task: clean-temp-fake-gcs-volume }

      - defer: { task: clean-fake-gcs-server }
      - cmd: docker run -d --name fake-gcs-server -p 4443:4443 -v ${PWD}/.tmp_local_data:/data fsouza/fake-gcs-server -scheme http -data /data -backend memory > /dev/null
        silent: true

      - go test -v internal/storage/*.go


  # --------------------------------
  # INTERNAL TASKS, NOT FOR RUNNING
  # --------------------------------

  clean-fake-gcs-server:
    internal: true
    silent: true
    cmds:
      - docker stop fake-gcs-server > /dev/null && docker rm fake-gcs-server > /dev/null


  prepare-fake-gcs-volume:
    internal: true
    silent: true
    cmds:
      - mkdir -p "$(pwd)/local_data/itchgrep-data/"
      # we have to do the if check because the fake gcs container chowns the
      # files to root (does not appear to reacht to --user flag)
      - if [ ! -f "$(pwd)/local_data/itchgrep-data/.COME_ON_DOCKER" ];
        then touch "$(pwd)/local_data/itchgrep-data/.COME_ON_DOCKER";
        fi
      # the `touch` is required because otherwise the directory won't be
      # created in the container, causing interaction with the bucket to 404

  prepare-temp-fake-gcs-volume:
    internal: true
    silent: true
    cmds:
      - rm -rf "$(pwd)/.tmp_local_data/"
      - mkdir -p "$(pwd)/.tmp_local_data/itchgrep-data/"
      # we have to do the if check because the fake gcs container chowns the
      # files to root (does not appear to reacht to --user flag)
      - if [ ! -f "$(pwd)/.tmp_local_data/.COME_ON_DOCKER" ];
        then touch "$(pwd)/.tmp_local_data/.COME_ON_DOCKER";
        fi
      # the `touch` is required because otherwise the directory won't be
      # created in the container, causing interaction with the bucket to 404

  clean-temp-fake-gcs-volume:
    internal: true
    silent: true
    cmds:
      - rm -rf "$(pwd)/.tmp_local_data/"
